#
# SPDX-License-Identifier: Apache-2.0
#
import os
import json
import subprocess
from api.lib.peer.command import Command
from api.config import FABRIC_TOOL, FABRIC_VERSION
import logging

LOG = logging.getLogger(__name__)

class Channel(Command):
    """Call CMD to perform channel create, join and other related operations"""

    def __init__(self, version=FABRIC_VERSION, peer=FABRIC_TOOL, **kwargs):
        self.peer = peer + "/peer"
        self.osnadmin = peer + "/osnadmin"
        super(Channel, self).__init__(version, **kwargs)

    def create(self, channel, orderer_admin_url, block_path, time_out="90s"):
        try:
            res = 0x100
            command = ""

            if os.getenv("CORE_PEER_TLS_ENABLED") == "false" or os.getenv("CORE_PEER_TLS_ENABLED") is None:
                command = "{} channel join --channelID {} --config-block {} -o {}".format(self.osnadmin, channel, block_path, orderer_admin_url)
            else:
                ORDERER_CA = os.getenv("ORDERER_CA")
                ORDERER_ADMIN_TLS_SIGN_CERT = os.getenv("ORDERER_ADMIN_TLS_SIGN_CERT")
                ORDERER_ADMIN_TLS_PRIVATE_KEY = os.getenv("ORDERER_ADMIN_TLS_PRIVATE_KEY")
                command = "{} channel join --channelID {} --config-block {} -o {} --ca-file {} --client-cert {} --client-key {}".format(self.osnadmin, channel, block_path, orderer_admin_url, ORDERER_CA, ORDERER_ADMIN_TLS_SIGN_CERT, ORDERER_ADMIN_TLS_PRIVATE_KEY)

            LOG.info(f"{command}")
            res = os.system(command)

            # The return value of os.system is not the result of executing the program. It is a 16 bit number,
            #  and its high bit is the return code
            res = res >> 8
        except Exception as e:
            err_msg = "create channel failed for {}!".format(e)
            raise Exception(err_msg)
        return res

    def list(self):
        try:
            res = subprocess.Popen("{} channel list".format(self.peer), shell=True,
                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)

            stdout, stderr = res.communicate()
            return_code = res.returncode

            if return_code == 0:
                content = str(stdout, encoding="utf-8")
                content = content.split("\n")
            else:
                stderr = str(stderr, encoding="utf-8")
                return return_code, stderr
        except Exception as e:
            err_msg = "get channel list failed for {}!".format(e)
            raise Exception(err_msg)
        return return_code, content[1:-1]

    def update(self, channel, channel_tx, orderer_url):
        """
        Send a configtx update.
        params:
            channel: channel id.
            channel_tx: Configuration transaction file generated by a tool such as configtxgen for submitting to orderer
            orderer_url: Ordering service endpoint.
        """
        try:
            res = os.system("{} channel update -c {}  -f {} -o {}"
                            .format(self.peer, channel, channel_tx, orderer_url))
        except Exception as e:
            err_msg = "update channel failed for {}!".format(e)
            raise Exception(err_msg)
        res = res >> 8
        return res

    def fetch(self, block_path, channel, orderer_general_url):
        """
        Fetch a specified block, writing it to a file e.g. <channelID>.block.
        params:
            option: block option newest|oldest|config|(block number).
            channel: channel id.
        """
        try:
            res = 0x100
            command = ""
            if os.getenv("CORE_PEER_TLS_ENABLED") == "false" or os.getenv("CORE_PEER_TLS_ENABLED") is None:
                command = "{} channel fetch config {} -o {} -c {}".format(self.peer, block_path, orderer_general_url, channel)
            else:
                ORDERER_CA = os.getenv("ORDERER_CA")
                orderer_address = orderer_general_url.split(":")[0]
                command = "{} channel fetch config {} -o {} --ordererTLSHostnameOverride {} -c {} --tls --cafile {}".format(self.peer, block_path, orderer_general_url, orderer_address, channel, ORDERER_CA)

            LOG.info(f"{command}")
            res = os.system(command)

            res = res >> 8
        except Exception as e:
            err_msg = "fetch a specified block failed {}!".format(e)
            raise Exception(err_msg)
        return res

    def signconfigtx(self, channel_tx):
        """
        Signs a configtx update.
        params:
            channel_tx: Configuration transaction file generated by a tool such as configtxgen for submitting to orderer
        """
        try:
            res = os.system(
                "{} channel signconfigtx -f {}".format(self.peer, channel_tx))
        except Exception as e:
            err_msg = "signs a configtx update failed {}".format(e)
            raise Exception(err_msg)
        res = res >> 8
        return res

    def join(self, block_path):
        """
        Joins the peer to a channel.
        params:
            block_path: Path to file containing genesis block.
        """
        try:
            command = "{} channel join -b {} ".format(self.peer, block_path)

            LOG.info(f"{command}")

            res = os.system(command)

        except Exception as e:
            err_msg = "join the peer to a channel failed. {}".format(e)
            raise Exception(err_msg)
        res = res >> 8
        return res

    def getinfo(self, channel):
        """
        Get blockchain information of a specified channel.
        params:
            channel: In case of a newChain command, the channel ID to create.
        """
        try:
            res = subprocess.Popen("{} channel getinfo  -c {}".format(self.peer, channel), shell=True,
                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)

            stdout, stderr = res.communicate()
            return_code = res.returncode

            if return_code == 0:
                content = str(stdout, encoding="utf-8")
                content = content.split("\n")[0].split(":", 1)[1]
                block_info = json.loads(content)
                body = {"block_info": block_info}
            else:
                stderr = str(stderr, encoding="utf-8")
                return return_code, stderr
        except Exception as e:
            err_msg = "get blockchain information of a specified channel failed. {}".format(
                e)
            raise Exception(err_msg)
        return return_code, body
